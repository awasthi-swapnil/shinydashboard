{"version":3,"sources":["../srcjs/_start.js","../srcjs/tabs.js","../srcjs/sidebar.js","../srcjs/output_binding_menu.js","../srcjs/input_binding_tabItem.js"],"names":["$","deactivateOtherTabs","$this","this","$sidebarMenu","closest","$tablinks","find","not","parent","removeClass","trigger","document","on","ensureActivatedTab","filter","$startTab","length","tab","hasClass","first","data","addClass","hide","window","next","menuOutputBinding","Shiny","OutputBinding","extend","scope","onValueError","el","err","unbindAll","renderError","renderValue","html","dependencies","deps","$html","parseHTML","renderHtml","className","attr","initializeInputs","bindAll","outputBindings","register","tabItemInputBinding","InputBinding","getValue","anchor","children","_getTabName","setValue","value","self","anchors","each","receiveMessage","hasOwnProperty","subscribe","callback","unsubscribe","off","inputBindings"],"mappings":";;AAGAA,EAAE,WCOF,GAAIC,GAAsB,WACxB,GAAIC,GAAQF,EAAEG,MACVC,EAAeF,EAAMG,QAAO,mBAG5BC,EAAYF,EAAaG,KAAI,uBAGjCD,GAAUE,IAAGN,GAAQO,OAAM,MAAOC,YAAW,UAG7CN,EAAaO,QAAO,8BAGtBX,GAAEY,UAAUC,GAAE,eAAiB,qCAChBZ,EAMf,IAAIa,GAAqB,WACvB,GAAIR,GAAYN,EAAA,mBAAqBO,KAAI,KAAMQ,OAAM,uBAIjDC,EAAYV,EAAUS,OAAM,4BAChC,OAAyB,KAAtBC,EAAWC,WACZD,GAAUE,IAAG,aAKTZ,EAAUG,OAAM,MAAOU,SAAQ,WACnCb,EAAUc,QAAQF,IAAG,SAIzBJ,KC5CGd,EAAA,mBAAsBqB,KAAI,aAC3BrB,EAAA,QAAUsB,SAAQ,oBAClBtB,EAAA,6BAA+BuB,QAKjCvB,EAAEY,UAAUC,GAAE,QAAU,kBAAmB,WACzCb,EAAEwB,QAAQb,QAAO,YAGnBX,EAAEY,UAAUC,GAAE,QAAU,gBAAiB,WACvCb,EAAEG,MAAMsB,KAAI,kBAAmBd,QAAO,UCNxC,IAAIe,GAAoB,GAAIC,OAAMC,aAClC5B,GAAE6B,OAAOH,GACPnB,KAAM,SAASuB,GACb,MAAO9B,GAAE8B,GAAOvB,KAAI,gCAEtBwB,aAAc,SAASC,EAAIC,GACzBN,MAAMO,UAAUF,GAChB7B,KAAKgC,YAAYH,EAAIC,IAEvBG,YAAa,SAASJ,EAAIX,GACxBM,MAAMO,UAAUF,EAEhB,IAAIK,GACAC,IACJ,IAAa,OAATjB,EAAJ,CAE4B,gBAAX,GACfgB,EAAOhB,EACmB,gBAAX,KACfgB,EAAOhB,EAAKgB,KACZC,EAAejB,EAAKkB,KAGtB,IAAIC,GAAQxC,EAAAA,EAAIyC,UAAUJ,GAG1BV,OAAMe,WAAUF,EAAOH,OAAQL,EAAIM,GAGnCN,EAAGW,UAAY,iDACAH,EAAMI,KAAI,SAEzBjB,MAAMkB,iBAAiBb,GACvBL,MAAMmB,QAAQd,OAGlBL,MAAMoB,eAAeC,SAAStB,EACA,mCCtC9B,IAAIuB,GAAsB,GAAItB,OAAMuB,YACpClD,GAAE6B,OAAOoB,GACP1C,KAAM,SAASuB,GACb,MAAO9B,GAAE8B,GAAOvB,KAAI,oBAEtB4C,SAAU,SAASnB,GACjB,GAAIoB,GAASpD,EAAEgC,GAAIzB,KAAI,4BAA6B8C,SAAQ,IAC5D,OAAsB,KAAlBD,EAAOnC,OACFd,KAAKmD,YAAYF,GAEnB,MAETG,SAAU,SAASvB,EAAIwB,GACrB,GAAIC,GAAOtD,KACPuD,EAAU1D,EAAEgC,GAAIzB,KAAI,qBAAsB8C,SAAQ,IACtDK,GAAQC,KAAK,WACX,GAAIF,EAAKH,YAAWtD,EAAGG,SAAWqD,EAEhC,MADAxD,GAAEG,MAAMe,IAAG,SACJ,KAIb0C,eAAgB,SAAS5B,EAAIX,GACvBA,EAAKwC,eAAc,UACrB1D,KAAKoD,SAASvB,EAAIX,EAAKmC,QAE3BM,UAAW,SAAS9B,EAAI+B,GAItB/D,EAAEgC,GAAInB,GAAE,6BAA+B,WACrCkD,OAGJC,YAAa,SAAShC,GACpBhC,EAAEgC,GAAIiC,IAAG,yBAEXX,YAAa,SAASF,GACpB,MAAOA,GAAOR,KAAI,iBAGtBjB,MAAMuC,cAAclB,SAASC,EAAqB","file":"shinydashboard.min.js","sourcesContent":["//---------------------------------------------------------------------\n// Source file: ../srcjs/_start.js\n\n$(function() {\n","//---------------------------------------------------------------------\n// Source file: ../srcjs/tabs.js\n\n// This function handles a special case in the AdminLTE sidebar: when there\n// is a sidebar-menu with items, and one of those items has sub-items, and\n// they are used for tab navigation. Normally, if one of the items is\n// selected and then a sub-item is clicked, both the item and sub-item will\n// retain the \"active\" class, so they will both be highlighted. This happens\n// because they're not designed to be used together for tab panels. This\n// code ensures that only one item will have the \"active\" class.\nvar deactivateOtherTabs = function() {\n  var $this = $(this);\n  var $sidebarMenu = $this.closest(\"ul.sidebar-menu\");\n\n  // Find all tab links under sidebar-menu\n  var $tablinks = $sidebarMenu.find(\"a[data-toggle='tab']\");\n\n  // If any other items are active, deactivate them\n  $tablinks.not($this).parent(\"li\").removeClass(\"active\");\n\n  // Trigger event for the tabItemInputBinding\n  $sidebarMenu.trigger('change.tabItemInputBinding');\n};\n\n$(document).on('shown.bs.tab', '.sidebar-menu a[data-toggle=\"tab\"]',\n               deactivateOtherTabs);\n\n\n// When document is ready, if there is a sidebar menu with no activated tabs,\n// activate the one specified by `data-start-selected`, or if that's not\n// present, the first one.\nvar ensureActivatedTab = function() {\n  var $tablinks = $(\"ul.sidebar-menu\").find(\"a\").filter(\"[data-toggle='tab']\");\n\n  // If there's a `data-start-selected` attribute and we can find a tab with\n  // that name, activate it.\n  var $startTab = $tablinks.filter(\"[data-start-selected='1']\");\n  if ($startTab.length !== 0) {\n    $startTab.tab(\"show\");\n    return;\n  }\n\n  // If we got this far, just activate the first tab.\n  if (! $tablinks.parent(\"li\").hasClass(\"active\") ) {\n    $tablinks.first().tab(\"show\");\n  }\n};\n\nensureActivatedTab();\n","//---------------------------------------------------------------------\n// Source file: ../srcjs/sidebar.js\n\n// Optionally disable sidebar\nif ($(\"section.sidebar\").data(\"disable\")) {\n  $(\"body\").addClass(\"sidebar-collapse\");\n  $(\".navbar > .sidebar-toggle\").hide();\n}\n\n// Trigger the resize event when the sidebar is collapsed/expanded\n// (this allows images to be responsive and resize themselves)\n$(document).on(\"click\", \".sidebar-toggle\", function() {\n  $(window).trigger(\"resize\");\n});\n\n$(document).on(\"click\", \".treeview > a\", function() {\n  $(this).next(\".treeview-menu\").trigger(\"shown\");\n});\n","//---------------------------------------------------------------------\n// Source file: ../srcjs/output_binding_menu.js\n\n/* global Shiny */\n\n// menuOutputBinding\n// ------------------------------------------------------------------\n// Based on Shiny.htmlOutputBinding, but instead of putting the result in a\n// wrapper div, it replaces the origin DOM element with the new DOM elements,\n// copying over the ID and class.\nvar menuOutputBinding = new Shiny.OutputBinding();\n$.extend(menuOutputBinding, {\n  find: function(scope) {\n    return $(scope).find('.shinydashboard-menu-output');\n  },\n  onValueError: function(el, err) {\n    Shiny.unbindAll(el);\n    this.renderError(el, err);\n  },\n  renderValue: function(el, data) {\n    Shiny.unbindAll(el);\n\n    var html;\n    var dependencies = [];\n    if (data === null) {\n      return;\n    } else if (typeof(data) === 'string') {\n      html = data;\n    } else if (typeof(data) === 'object') {\n      html = data.html;\n      dependencies = data.deps;\n    }\n\n    var $html = $($.parseHTML(html));\n\n    // Convert the inner contents to HTML, and pass to renderHtml\n    Shiny.renderHtml($html.html(), el, dependencies);\n\n    // Extract class of wrapper, and add them to the wrapper element\n    el.className = 'shinydashboard-menu-output shiny-bound-output ' +\n                   $html.attr('class');\n\n    Shiny.initializeInputs(el);\n    Shiny.bindAll(el);\n  }\n});\nShiny.outputBindings.register(menuOutputBinding,\n                              \"shinydashboard.menuOutputBinding\");\n","//---------------------------------------------------------------------\n// Source file: ../srcjs/input_binding_tabItem.js\n\n/* global Shiny */\n\n// tabItemInputBinding\n// ------------------------------------------------------------------\n// Based on Shiny.tabItemInputBinding, but customized for tabItems in\n// shinydashboard, which have a slightly different structure.\nvar tabItemInputBinding = new Shiny.InputBinding();\n$.extend(tabItemInputBinding, {\n  find: function(scope) {\n    return $(scope).find('ul.sidebar-menu');\n  },\n  getValue: function(el) {\n    var anchor = $(el).find('li:not(.treeview).active').children('a');\n    if (anchor.length === 1)\n      return this._getTabName(anchor);\n\n    return null;\n  },\n  setValue: function(el, value) {\n    var self = this;\n    var anchors = $(el).find('li:not(.treeview)').children('a');\n    anchors.each(function() { // eslint-disable-line consistent-return\n      if (self._getTabName($(this)) === value) {\n        $(this).tab('show');\n        return false;\n      }\n    });\n  },\n  receiveMessage: function(el, data) {\n    if (data.hasOwnProperty('value'))\n      this.setValue(el, data.value);\n  },\n  subscribe: function(el, callback) {\n    // This event is triggered by deactivateOtherTabs, which is triggered by\n    // shown. The deactivation of other tabs must occur before Shiny gets the\n    // input value.\n    $(el).on('change.tabItemInputBinding', function() {\n      callback();\n    });\n  },\n  unsubscribe: function(el) {\n    $(el).off('.tabItemInputBinding');\n  },\n  _getTabName: function(anchor) {\n    return anchor.attr('data-value');\n  }\n});\nShiny.inputBindings.register(tabItemInputBinding, 'shinydashboard.tabItemInput');\n"]}